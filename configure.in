# Process this file with autoconf to produce a configure script.
AC_INIT(loggeragent, 3.1.1, gphat@cafes.net)
AC_CONFIG_SRCDIR([src/log.c])
AC_CONFIG_HEADER([config.h])

AH_TEMPLATE([PLUGIN_DIR],
	[Define the directory in which plugins are stored.]
)
AH_TEMPLATE([AGENT_CERT],
	[Path to the agent's certificate.]
)
AH_TEMPLATE([AGENT_KEY],
	[Path to the agent's key.]
)
AH_TEMPLATE([CA_CERT],
	[Path to the CA certificate.]
)
AH_TEMPLATE([OSNAME],
	[Define the OS we are on for the plugin compilation.]
)

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_SUBST([INSTALL])

AC_CANONICAL_HOST

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([arpa/inet.h fcntl.h getopt.h mntent.h netdb.h netinet/in.h stdlib.h string.h strings.h time.h sys/mount.h sys/param.h sys/socket.h sys/statvfs.h sys/time.h sys/vfs.h syslog.h unistd.h nameser.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_MODE_T
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_FORK
dnl Commented this one out because we only use getloadavg() on OS X
dnl AC_FUNC_GETLOADAVG
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_WAIT3
AC_CHECK_FUNCS([bzero execv getcwd gethostbyname getmntent getmntinfo inet_ntoa localtime memset mkdir rmdir socket strchr strdup strerror strstr strtol sysinfo uname])
AC_CHECK_FUNCS(getloadavg)
if test $ac_cv_func_getloadavg = yes; then
	AC_DEFINE(HAVE_GETLOADAVG)
fi

AC_CHECK_FUNCS(vsnprintf)
if test $ac_cv_func_vsnprintf = no; then
	echo "** loggeragent requires vsnprintf"
	exit;
fi

AC_CHECK_FUNCS(socket)
if test $ac_cv_func_socket = no; then
	AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket")
fi

AC_CHECK_FUNCS(inet_addr)
if test $ac_cv_func_inet_addr = no; then
	AC_CHECK_LIB(nsl, inet_addr, LIBS="$LIBS -lnsl")
fi

case $host_os in
	*linux*)
		OSNAME="linux"
		SHAREFLAG="-shared"
		CFLAGS="$CFLAGS -rdynamic"
		PLATPACK=rpm
		;;
	*solaris*)
		OSNAME="solaris"
		SHAREFLAG="-G"
		PLATPACK=pkg
		PKG_NAME=lgragent
		;;
	*darwin*)
		OSNAME="darwin"
		;;
esac
AC_SUBST([OSNAME])
AC_SUBST([SHAREFLAG])
AC_SUBST([PLATPACK])
AC_SUBST([PKG_NAME])

AC_CHECK_LIB(dl, dlopen, LIBS="$LIBS -ldl")
AC_CHECK_LIB(kstat, kstat_open)

AC_ARG_ENABLE(static,
	[AC_HELP_STRING([--enable-static], [compile dependencies statically])],
	[STATICLIBS="-Wl,-Bstatic"]
)

# Optional Modules

AC_ARG_ENABLE(ftp,
	[AC_HELP_STRING([--enable-ftp], [Enable the FTP module.])],
	[PLUGINS="ftpops.so"]
)

AC_ARG_ENABLE(ffile,
	[AC_HELP_STRING([--enable-ftp], [Enable the FTP module.])],
	[PLUGINS="fileops.so"]
)

AC_ARG_ENABLE(metrics,
	[AC_HELP_STRING([--enable-metrics], [Enable the Metric plugin.])],
	[PLUGINS="$PLUGINS metricops.so"]
)

AC_ARG_ENABLE(packages,
	[AC_HELP_STRING([--enable-packages], [Enable the Package plugin.])],
	[PLUGINS="$PLUGINS packageops.so"]
)

# Other Stuff

AC_ARG_WITH(cert-directory,
	[AC_HELP_STRING([--with-cert-directory=CERT], [use the specified directory for certificates]) ],
	[if test -r "$with_cert_directory/agent.key"; then
		CERT_DIRECTORY="$with_cert_directory"
	 else
		AC_MSG_ERROR([agent.key not found in specified certificate directory.])
	 fi
	],
	[AC_MSG_ERROR([Must specify a cert directory with --with-cert-directory!])]
)

AC_SUBST([CERT_DIRECTORY])

AC_ARG_WITH(xml-config,
	[AC_HELP_STRING([--with-xml-config=PATH], [use xml-config in PATH to find libxml])],
	[if ! test -x "$with_xml_config"; then
		AC_MSG_ERROR([$with_xml_config cannot be executed])
	 fi
	 XMLCONFIG="$with_xml_config"]
)
if test -z "$XMLCONFIG"; then
	AC_CHECK_PROGS(XMLCONFIG, [xml2-config])
fi
if test -n "$XMLCONFIG"; then
	if ! test -z "$STATICLIBS"; then
		STATICLIBS="$STATICLIBS -lxml2"
		LIBS="$LIBS `$XMLCONFIG --libs | sed -e s/-lxml2\ //`"
	else
		LIBS="$LIBS `$XMLCONFIG --libs`"
	fi
	CFLAGS="$CFLAGS `$XMLCONFIG --cflags`"
else
	AC_MSG_ERROR([xml-config could not be found])
fi

if test -n "$enable_ftp"; then
	AC_ARG_WITH(curl-config,
		[AC_HELP_STRING([--with-curl-config=PATH], [use curl-config in PATH to find curl])],
		[if ! test -x "$with_curl_config"; then
			AC_MSG_ERROR([$with_curl_config cannot be executed])
		 fi
		 CURLCONFIG="$with_curl_config"]
	)

	if test -z "$CURLCONFIG"; then
		AC_CHECK_PROGS(CURLCONFIG, [curl-config])
	fi

	if test -z "$CURLCONFIG"; then
		AC_MSG_ERROR([Could not find curl library for FTP Plugin])
	fi
	if ! test -z "$STATICLIBS"; then
		STATICLIBS="$STATICLIBS -lcurl"
		LIBS="$LIBS `$CURLCONFIG --libs | sed -e s/-lcurl\ // | sed -e s/-lssl\ // | sed -e s/-lcrypto\ //`"
	else
		LIBS="$LIBS `$CURLCONFIG --libs`"
	fi
	CFLAGS="$CFLAGS `$CURLCONFIG --cflags`"
fi

AC_ARG_WITH(openssl,
	[AC_HELP_STRING([--with-openssl=PATH], [include OpenSSL from specified directory])],
	[if ! test -r "$with_openssl/include/openssl/err.h"; then
		AC_MSG_ERROR([Could not find OpenSSL err.h in $with_openssl.])
	 fi
	 OPENSSL="$with_openssl/include"],
	[OPENSSL="/usr/local/ssl"]
)
CFLAGS="$CFLAGS -I$OPENSSL/include"
if ! test -z "$STATICLIBS"; then
	STATICLIBS="$STATICLIBS -L$OPENSSL/lib/ -lssl -lcrypto -Wl,-Bdynamic"
else
	LIBS="$LIBS -L$OPENSSL/lib/ -lssl -lcrypto"
fi
AC_SUBST([STATICLIBS])

AC_SUBST([PLUGINS])

test "$prefix" = NONE && prefix=/usr/local
PLUGIN_DIR="$prefix/lib/loggeragent"
AGENT_KEY="$prefix/share/loggeragent/agent.key"
AGENT_CERT="$prefix/share/loggeragent/agent.crt"
CA_CERT="$prefix/share/loggeragent/CA.crt"
AC_DEFINE_UNQUOTED(PLUGIN_DIR, "$PLUGIN_DIR")
AC_DEFINE_UNQUOTED(AGENT_KEY, "$AGENT_KEY")
AC_DEFINE_UNQUOTED(AGENT_CERT, "$AGENT_CERT")
AC_DEFINE_UNQUOTED(CA_CERT, "$CA_CERT")

#CFLAGS="$CFLAGS -Wall -Wshadow"

AC_CONFIG_FILES([loggeragent.spec
				 pkginfo
				 pkglist
 				 Makefile
				 plugins/Makefile
				 src/Makefile
				 res/loggeragent.init
				 res/loggeragent.xml])
AC_OUTPUT
